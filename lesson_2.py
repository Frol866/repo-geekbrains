# 1.	Создать список и заполнить его элементами различных типов данных.
# Реализовать скрипт проверки типа данных каждого элемента.
# Использовать функцию type() для проверки типа.
# Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.

spisok = ['A', 5, -4, 0.1, 0, None, False, ' ', 'Задача']

i = 0

for element in spisok:
    print(type(spisok[i]))
    i += 1


# 2.	Для списка реализовать обмен значений соседних элементов.
# Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т. д.
# При нечётном количестве элементов последний сохранить на своём месте.
# Для заполнения списка элементов нужно использовать функцию input().

# функция ввода списка через пробел
def input_spisok():
    spisok = input("Введите элементы списка через ПРОБЕЛ: ").split()
    return spisok

# функция меняет местами соседние элементы списка между собой
def change_list(spisok):
    i = 0
    for i in range(0, len(spisok) - 1, 2): # перебор списка от первого элемента до предпоследнего с шагом 2
        spisok[i], spisok[i + 1] = spisok[i + 1], spisok[i] # меняем местами соседнии элементы


spisok = []
spisok = input_spisok()
print('Исходный список - ', spisok)
change_list(spisok)
print('Измененный список - ', spisok)


# 3. Пользователь вводит месяц в виде целого числа от 1 до 12.
# Сообщить к какому времени года относится месяц (зима, весна, лето, осень).
# Напишите решения через list и через dict.

# реализация через словари
seasons = {
'Зима': (1, 2, 12),
'Весна': (3, 4, 5),
'Лето': (6, 7, 8),
'Осень': (9, 10, 11)
}

month = int(input('Введит месяц числом от 1 до 12: '))

for key in seasons.keys():
    if month in seasons[key]:
        print(key)

# реализация через список
seasons2 = ['Зима', 'Весна', 'Лето', 'Осень']
month2 = int(input('Введит месяц числом от 1 до 12: '))


if month2 == 1 or month2 == 2 or month2 == 12:
    print(seasons2[0])
elif month2 == 3 or month2 == 4 or month2 == 5:
    print(seasons2[1])
elif month2 == 6 or month2 == 7 or month2 == 8:
    print(seasons2[2])
elif month2 == 9 or month2 == 10 or month2 == 11:
    print(seasons2[3])

# 4.	Пользователь вводит строку из нескольких слов, разделённых пробелами.
# Вывести каждое слово с новой строки.
# Строки нужно пронумеровать. Если слово длинное, выводить только первые 10 букв в слове.

# Пользователь вводит строку из нескольких слов, разделённых пробелами
stroka = input('Введите несколько слов разделенных пробелами: ')
print(stroka)

# Вывести каждое слово с новой строки.
stroka_list = stroka.split(' ')
for el in stroka_list:
    print(el)

# Строки нужно пронумеровать.
for ind, el in enumerate(stroka_list, 1):
    print(ind, '-', el)

# Если слово длинное, выводить только первые 10 букв в слове.
for ind, el in enumerate(stroka_list, 1):
    if int(len(el)) > 10:
        print(ind, '-', el[:10])
    else:
        print(ind, '-', el)


# 5.	Реализовать структуру «Рейтинг», представляющую собой набор натуральных чисел, который не возрастает.
# У пользователя нужно запрашивать новый элемент рейтинга.
# Если в рейтинге существуют элементы с одинаковыми значениями,
# то новый элемент с тем же значением должен разместиться после них.
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввёл число 3. Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввёл число 8. Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввёл число 1. Результат: 7, 5, 3, 3, 2, 1.
# Набор натуральных чисел можно задать сразу в коде, например, my_list = [7, 5, 3, 3, 2].

my_list = [10, 9, 6, 2, 1]
chislo = int(input('Введите число рейтинга: '))

print('Исходный список: ', my_list)

max_chislo = max(my_list)
if chislo > max_chislo: #если число больше максимального числа в списке, вставляем его в начало списка
    my_list.insert(0, chislo)
elif chislo in my_list: #если число есть в списке - вставляем его справа от имеющегося числа
    my_list.insert(my_list[::+1].index(chislo), chislo)
elif chislo not in my_list: #если числа нет в списке
    min_chislo = min(my_list)
    if chislo < min_chislo: #сравниваем с минимальным числом и если наше число меньше минимального в списке
        my_list.append(chislo) #добавляем наше число в конец
    else: #иначе перебираем все числа в списке и сравниваем кажждое число списка с нашим
        for el in my_list:
            if chislo > el: # когда оно будет больше сравниваемого элемента
                pos = my_list.index(el) #находим позицию для добавления числа
                my_list.insert(pos, chislo) #добавляем его перед ним в наш список
                break
            else:
                continue #если число меньше перебираемого элемента, то продолжаем перебор

print('Измененный список: ', my_list)


# 6. * Реализовать структуру данных «Товары».
# Она должна представлять собой список кортежей.
# Каждый кортеж хранит информацию об отдельном товаре.
# В кортеже должно быть два элемента — номер товара и словарь с параметрами
# (характеристиками товара: название, цена, количество, единица измерения).
# Структуру нужно сформировать программно, т.е. запрашивать все данные у пользователя.
# Пример готовой структуры:
# [
# (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
# (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
# (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
# ]
# Необходимо собрать аналитику о товарах.
# Реализовать словарь, в котором каждый ключ — характеристика товара, например название,
# а значение — список значений-характеристик, например список названий товаров.
# Пример:
# {
# “название”: [“компьютер”, “принтер”, “сканер”],
# “цена”: [20000, 6000, 2000],
# “количество”: [5, 2, 7],
# “ед”: [“шт.”]
# }

# функция ввода данных о товаре и формирование кортежей с номером товара и характеристиками
def input_data(number_products):
    i = 1
    while i <= number_products:
        prod_dict = dict({
            'название': input("введите название: "),
            'цена': input("Введите цену: "),
            'количество': input('Введите количество: '),
            'eд. измерения': input("Введите единицу измерения: ")
            })
        prod_list.append((i, prod_dict))
        i += 1
    return

# функция аналитики товаров
def analitics_data(prod_list):
    for el in prod_list:
        for key, value in el[1].items():
            if key in anal_dict:
                anal_dict[key].append(value)
            else:
                anal_dict[key] = [value]
    return

number_products = int(input('Введите кол-во позиций товаров: '))

prod_dict = {}
prod_list = []
anal_dict = {}

input_data(number_products)
print(prod_list)

analitics_data(prod_list)
print(anal_dict)
